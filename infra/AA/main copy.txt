provider "kubernetes" {
  config_path = "~/.kube/config"
}

resource "kubernetes_namespace" "kafka_ns" {
  metadata {
    name = "kafka-namespace"
  }
}

resource "kubernetes_secret" "kafka_creds" {
  metadata {
    name      = "kafka-credentials"
    namespace = kubernetes_namespace.kafka_ns.metadata[0].name
  }

  data = {
    KAFKA_USERNAME = base64encode("user1")
    KAFKA_PASSWORD = base64encode("3dIy37mZ46")
  }
}

resource "kubernetes_config_map" "kafka_config" {
  metadata {
    name      = "kafka-config"
    namespace = kubernetes_namespace.kafka_ns.metadata[0].name
  }

  data = {
    KAFKA_BROKER_URL = "my-kafka.default.svc.cluster.local:9092"
    KAFKA_TOPIC      = "posts"
  }
}

provider "helm" {
  kubernetes {
    config_path = "~/.kube/config"
  }
}

# resource "helm_release" "kafka" {
#   name       = "kafka-controller"
#   repository = "oci://registry-1.docker.io/bitnamicharts"
#   chart      = "kafka"
#   namespace  = kubernetes_namespace.kafka_ns.metadata[0].name
#   values = [file("${path.module}/../../kafka/kafka-controller-values.yaml")]

#   set {
#     name  = "auth.clientProtocol"
#     value = "sasl_plaintext"
#   }

#   # Additional Kafka configurations can go here
# }


resource "helm_release" "kafka_producer" {
  name       = "kafka-producer"
  chart = "${path.module}/../../producer/helm"  # Path to the local Helm chart directory

  # Use the values file for most configurations
  values = [file("${path.module}/../../producer/helm/values.yaml")]

  # Override values that are not sensitive
  set {
    name  = "image.repository"
    value = "python"
  }

  set {
    name  = "image.tag"
    value = "3.8-slim"
  }

  set {
    name  = "env.KAFKA_BROKER_URL"
    value = "my-kafka.default.svc.cluster.local:9092"
  }

  set {
    name  = "env.KAFKA_TOPIC"
    value = "posts"
  }

  # Use `set_sensitive` for sensitive values coming from the Kubernetes secret
  set_sensitive {
    name  = "env.KAFKA_USERNAME"
    value = kubernetes_secret.kafka_credentials.data["KAFKA_USERNAME"]
  }

  set_sensitive {
    name  = "env.KAFKA_PASSWORD"
    value = kubernetes_secret.kafka_credentials.data["KAFKA_PASSWORD"]
  }
}








// vars
variable "kafka_username" {
  type = string
  sensitive = true
}

variable "kafka_password" {
  type = string
  sensitive = true
}
resource "kubernetes_secret" "kafka_credentials" {
  metadata {
    name = "kafka-credentials"
    namespace = "default"
  }

  data = {
    KAFKA_USERNAME = var.kafka_username
    KAFKA_PASSWORD = var.kafka_password
  }
}
