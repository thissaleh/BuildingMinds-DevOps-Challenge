# Default values for helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: thissaleh/producer-image
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 3
# Command and args for the container
command: ["/bin/sh"]
args: ["-c", "sleep infinity"]
# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: 
  - name: my-dockerhub-secret
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "kafka-producer-sa"

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/

podLabels:
  app.kubernetes.io/name: kafka-producer
  app.kubernetes.io/instance: instance-0
  app.kubernetes.io/version: "1.0"


podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
# service:
#   # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
#   type: ClusterIP
#   # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
#   port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 500m
    memory: 512Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe: null
  # httpGet:
  #   path: /
  #   port: http
readinessProbe: null
  # httpGet:
  #   path: /
  #   port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# env:
#   - name: KAFKA_BROKER_URL
#     valueFrom:
#       configMapKeyRef:
#         name: kafka-config
#         key: KAFKA_BROKER_URL
#   - name: KAFKA_TOPIC
#     valueFrom:
#       configMapKeyRef:
#         name: kafka-config
#         key: KAFKA_TOPIC
  # - name: KAFKA_USERNAME
  #   valueFrom:
  #     secretKeyRef:
  #       name: kafka-credentials
  #       key: KAFKA_USERNAME
  # - name: KAFKA_PASSWORD
  #   valueFrom:
  #     secretKeyRef:
  #       name: kafka-credentials
  #       key: KAFKA_PASSWORD

  # - name: KAFKA_USERNAME
  #   valueFrom:
  #     secretKeyRef:
  #       name: kafka-credentials
  #       key: KAFKA_USERNAME
  # - name: KAFKA_PASSWORD
  #   valueFrom:
  #     secretKeyRef:
  #       name: kafka-credentials
  #       key: KAFKA_PASSWORD

  # - name: KAFKA_USERNAME
  #   valueFrom:
  #     secretKeyRef:
  #       name: kafka-user-passwords  # Name of the Kafka secret
  #       key: client-username         # Key for username in the secret
  # - name: KAFKA_PASSWORD
  #   valueFrom:
  #     secretKeyRef:
  #       name: kafka-user-passwords
  #       key: client-passwords        # Key for password in the secret